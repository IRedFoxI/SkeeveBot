requireLibrary '../../IO'

module Kesh
	module IO
	
		# A class that reads from a Stream and runs a callback when a full line has been read.
		class AsynchronousStreamReader

			# Exception generated by the reader.
			attr_reader :exception
		
			# Initialize the reader.
			def initialize( stream, asyncMethod )
				Kesh::ArgTest::type( "stream", stream, Kesh::IO::Stream )
				Kesh::ArgTest::type( "asyncMethod", asyncMethod, Method )
				@stream = stream
				@asyncMethod = asyncMethod
				@buffer = ""
				@thread = nil
				@stopReading = false
				@exception = nil
			end
			
			
			# Start reading from the Stream.
			def start()
				@stopReading = false
				@thread = Thread.new do					
					begin
						until @stopReading
							readFromStream()
							sleep( 0.1 )
						end
					rescue Exception => ex
						@exception = ex
						@stopReading = true
						puts ex
					end
				end
			end
			
			
			# Stop reading from the Stream.
			def stop()
				@stopReading = true
			end				


			private
			def readFromStream()
				string = @stream.read( 1024, false )
				return nil if ( string == nil )
				return nil if ( string.length == 0 )
				
				string.each_char { |char|
					
					if ( char == "\n" )
						if ( @buffer != "" )
							@asyncMethod.call( @stream, @buffer )
							@buffer = ""
						end
						
					elsif ( char != "\r" )
						@buffer += char

					end
				}
			end
			
		end
		
	end
end
		